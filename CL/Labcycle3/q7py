# 7. Implement the Viterbi algorithm to find the most probable POS tag sequence for a
#    given sentence, using the given probabilities

import pandas as pd
from tabulate import tabulate

def VETRIBI(A,B):

    si = A["STOP"][1:]
    pi = A.loc["START"][1:]

    vetribi = pd.DataFrame(index=B.index, columns=B.columns)
    backptr = pd.DataFrame(index=B.index, columns=B.columns)
    A.drop('START', inplace=True)
    A.drop('STOP', axis=1, inplace=True)

    vetribi.iloc[:,0] = pi * B.iloc[:,0]
    backptr.iloc[:,0] = "START"

    # print("SETUP")
    # print(tabulate(vetribi, tablefmt="grid", headers="keys"))
    # print(tabulate(backptr, tablefmt="grid", headers="keys"))
    # print(tabulate(A, tablefmt="grid", headers="keys"))
    # print(tabulate(B, tablefmt="grid", headers="keys"))
    # print(si)
    # print(pi)

    for j in range(1,len(vetribi.columns)): 
        print("Step: ",j)
        for i in range(len(vetribi.index)):  
            vetribi.iloc[i,j] = (vetribi.iloc[:,j-1] * A.iloc[:,i]).max() * B.iloc[i,j]
            backptr.iloc[i,j] = (vetribi.iloc[:,j-1] * A.iloc[:,i]).idxmax()
        print(tabulate(vetribi, tablefmt="grid", headers="keys"))
        print(tabulate(backptr, tablefmt="grid", headers="keys"))
        print(" ")

    vetribi.iloc[:,-1] = vetribi.iloc[:,-1] * si
    ptr = [vetribi.iloc[:,-1].idxmax()] 

    for j in range(len(backptr.columns)-1,-1,-1):
        ptr.append(backptr.loc[ptr[-1]].iloc[j])
    output = [["Sentence"] + B.columns.to_list(),["POS tag"]+ ptr[::-1][1:]]

    return output
    


if __name__ == '__main__':

    A = pd.DataFrame(
        [[0, 0.5, 0.25, 0.25, 0],
        [0.25, 0.25, 0.5, 0, 0],
        [0.25, 0.25, 0, 0.25, 0.25],
        [0, 0.75, 0, 0.25, 0],
        [0.5, 0.25, 0, 0.25, 0]],
        columns=["STOP","NN","VB","JJ","RB"],  
        index=['START', 'NN', 'VB', 'JJ', 'RB']            
    )
    B = pd.DataFrame(
        [[0.1, 0.01, 0.01],
        [0.01, 0.1, 0.01],
        [0, 0, 0.1],
        [0, 0, 0.1]],
        columns=["time","flies","fast"],
        index=['NN', 'VB', 'JJ', 'RB']
    )
    print(" ")
    print("      VERTRIBI ALGORITHM")
    print("A:")
    print(tabulate(A, tablefmt="grid", headers="keys"))
    print("B:")
    print(tabulate(B, tablefmt="grid", headers="keys"))
    print(" ")
    print("Algorithm:")
    out = VETRIBI(A,B)
    print("Output:")
    print(tabulate(out, tablefmt="grid"))
